///
/// PTWifiScanResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `PTWifiEntry` to properly resolve imports.
namespace margelo::nitro::espprovtoolkit { struct PTWifiEntry; }

#include <optional>
#include <vector>
#include "PTWifiEntry.hpp"

namespace margelo::nitro::espprovtoolkit {

  /**
   * A struct which can be represented as a JavaScript object (PTWifiScanResult).
   */
  struct PTWifiScanResult {
  public:
    bool success     SWIFT_PRIVATE;
    std::optional<std::vector<PTWifiEntry>> networks     SWIFT_PRIVATE;
    std::optional<double> error     SWIFT_PRIVATE;

  public:
    PTWifiScanResult() = default;
    explicit PTWifiScanResult(bool success, std::optional<std::vector<PTWifiEntry>> networks, std::optional<double> error): success(success), networks(networks), error(error) {}
  };

} // namespace margelo::nitro::espprovtoolkit

namespace margelo::nitro {

  using namespace margelo::nitro::espprovtoolkit;

  // C++ PTWifiScanResult <> JS PTWifiScanResult (object)
  template <>
  struct JSIConverter<PTWifiScanResult> final {
    static inline PTWifiScanResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return PTWifiScanResult(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "success")),
        JSIConverter<std::optional<std::vector<PTWifiEntry>>>::fromJSI(runtime, obj.getProperty(runtime, "networks")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "error"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const PTWifiScanResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "success", JSIConverter<bool>::toJSI(runtime, arg.success));
      obj.setProperty(runtime, "networks", JSIConverter<std::optional<std::vector<PTWifiEntry>>>::toJSI(runtime, arg.networks));
      obj.setProperty(runtime, "error", JSIConverter<std::optional<double>>::toJSI(runtime, arg.error));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "success"))) return false;
      if (!JSIConverter<std::optional<std::vector<PTWifiEntry>>>::canConvert(runtime, obj.getProperty(runtime, "networks"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "error"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
