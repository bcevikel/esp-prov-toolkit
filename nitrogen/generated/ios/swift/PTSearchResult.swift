///
/// PTSearchResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PTSearchResult`, backed by a C++ struct.
 */
public typealias PTSearchResult = margelo.nitro.espprovtoolkit.PTSearchResult

public extension PTSearchResult {
  private typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Create a new instance of `PTSearchResult`.
   */
  init(success: Bool, deviceNames: [String]?, error: Double?) {
    self.init(success, { () -> bridge.std__optional_std__vector_std__string__ in
      if let __unwrappedValue = deviceNames {
        return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(std.string(__item))
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = error {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var success: Bool {
    @inline(__always)
    get {
      return self.__success
    }
    @inline(__always)
    set {
      self.__success = newValue
    }
  }
  
  var deviceNames: [String]? {
    @inline(__always)
    get {
      return { () -> [String]? in
        if let __unwrapped = self.__deviceNames.value {
          return __unwrapped.map({ __item in String(__item) })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__deviceNames = { () -> bridge.std__optional_std__vector_std__string__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
            var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(std.string(__item))
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var error: Double? {
    @inline(__always)
    get {
      return self.__error.value
    }
    @inline(__always)
    set {
      self.__error = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
