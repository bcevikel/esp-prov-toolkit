///
/// PTWifiEntry.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PTWifiEntry`, backed by a C++ struct.
 */
public typealias PTWifiEntry = margelo.nitro.espprovtoolkit.PTWifiEntry

public extension PTWifiEntry {
  private typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Create a new instance of `PTWifiEntry`.
   */
  init(ssid: String, rssi: Double, auth: Double, bssid: String?, channel: Double?) {
    self.init(std.string(ssid), rssi, auth, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = bssid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = channel {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var ssid: String {
    @inline(__always)
    get {
      return String(self.__ssid)
    }
    @inline(__always)
    set {
      self.__ssid = std.string(newValue)
    }
  }
  
  var rssi: Double {
    @inline(__always)
    get {
      return self.__rssi
    }
    @inline(__always)
    set {
      self.__rssi = newValue
    }
  }
  
  var auth: Double {
    @inline(__always)
    get {
      return self.__auth
    }
    @inline(__always)
    set {
      self.__auth = newValue
    }
  }
  
  var bssid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__bssid.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__bssid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var channel: Double? {
    @inline(__always)
    get {
      return self.__channel.value
    }
    @inline(__always)
    set {
      self.__channel = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
