///
/// PTDevice.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PTDevice`, backed by a C++ struct.
 */
public typealias PTDevice = margelo.nitro.espprovtoolkit.PTDevice

public extension PTDevice {
  private typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Create a new instance of `PTDevice`.
   */
  init(name: String, security: PTSecurity, transport: PTTransport, connected: Bool?, username: String?, versionInfo: String?, capabilities: [String]?, advertisementData: String?) {
    self.init(std.string(name), security, transport, { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = connected {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = username {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = versionInfo {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_std__string__ in
      if let __unwrappedValue = capabilities {
        return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(std.string(__item))
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = advertisementData {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var name: String {
    @inline(__always)
    get {
      return String(self.__name)
    }
    @inline(__always)
    set {
      self.__name = std.string(newValue)
    }
  }
  
  var security: PTSecurity {
    @inline(__always)
    get {
      return self.__security
    }
    @inline(__always)
    set {
      self.__security = newValue
    }
  }
  
  var transport: PTTransport {
    @inline(__always)
    get {
      return self.__transport
    }
    @inline(__always)
    set {
      self.__transport = newValue
    }
  }
  
  var connected: Bool? {
    @inline(__always)
    get {
      return self.__connected.value
    }
    @inline(__always)
    set {
      self.__connected = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var username: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__username.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__username = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var versionInfo: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__versionInfo.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__versionInfo = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var capabilities: [String]? {
    @inline(__always)
    get {
      return { () -> [String]? in
        if let __unwrapped = self.__capabilities.value {
          return __unwrapped.map({ __item in String(__item) })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__capabilities = { () -> bridge.std__optional_std__vector_std__string__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
            var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(std.string(__item))
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var advertisementData: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__advertisementData.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__advertisementData = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
