///
/// PTDeviceResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PTDeviceResult`, backed by a C++ struct.
 */
public typealias PTDeviceResult = margelo.nitro.espprovtoolkit.PTDeviceResult

public extension PTDeviceResult {
  private typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Create a new instance of `PTDeviceResult`.
   */
  init(success: Bool, result: PTDevice?) {
    self.init(success, { () -> bridge.std__optional_PTDevice_ in
      if let __unwrappedValue = result {
        return bridge.create_std__optional_PTDevice_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var success: Bool {
    @inline(__always)
    get {
      return self.__success
    }
    @inline(__always)
    set {
      self.__success = newValue
    }
  }
  
  var result: PTDevice? {
    @inline(__always)
    get {
      return { () -> PTDevice? in
        if let __unwrapped = self.__result.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__result = { () -> bridge.std__optional_PTDevice_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_PTDevice_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
