///
/// PTWifiScanResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PTWifiScanResult`, backed by a C++ struct.
 */
public typealias PTWifiScanResult = margelo.nitro.espprovtoolkit.PTWifiScanResult

public extension PTWifiScanResult {
  private typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Create a new instance of `PTWifiScanResult`.
   */
  init(success: Bool, networks: [PTWifiEntry]?, error: PTError?) {
    self.init(success, { () -> bridge.std__optional_std__vector_PTWifiEntry__ in
      if let __unwrappedValue = networks {
        return bridge.create_std__optional_std__vector_PTWifiEntry__({ () -> bridge.std__vector_PTWifiEntry_ in
          var __vector = bridge.create_std__vector_PTWifiEntry_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(__item)
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_PTError_ in
      if let __unwrappedValue = error {
        return bridge.create_std__optional_PTError_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var success: Bool {
    @inline(__always)
    get {
      return self.__success
    }
    @inline(__always)
    set {
      self.__success = newValue
    }
  }
  
  var networks: [PTWifiEntry]? {
    @inline(__always)
    get {
      return { () -> [PTWifiEntry]? in
        if let __unwrapped = self.__networks.value {
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__networks = { () -> bridge.std__optional_std__vector_PTWifiEntry__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_PTWifiEntry__({ () -> bridge.std__vector_PTWifiEntry_ in
            var __vector = bridge.create_std__vector_PTWifiEntry_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var error: PTError? {
    @inline(__always)
    get {
      return self.__error.has_value() ? self.__error.pointee : nil
    }
    @inline(__always)
    set {
      self.__error = { () -> bridge.std__optional_PTError_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_PTError_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
