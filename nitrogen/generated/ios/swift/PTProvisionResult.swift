///
/// PTProvisionResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PTProvisionResult`, backed by a C++ struct.
 */
public typealias PTProvisionResult = margelo.nitro.espprovtoolkit.PTProvisionResult

public extension PTProvisionResult {
  private typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Create a new instance of `PTProvisionResult`.
   */
  init(success: Bool, status: PTProvisionStatus?, error: PTError?) {
    self.init(success, { () -> bridge.std__optional_PTProvisionStatus_ in
      if let __unwrappedValue = status {
        return bridge.create_std__optional_PTProvisionStatus_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_PTError_ in
      if let __unwrappedValue = error {
        return bridge.create_std__optional_PTError_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var success: Bool {
    @inline(__always)
    get {
      return self.__success
    }
    @inline(__always)
    set {
      self.__success = newValue
    }
  }
  
  var status: PTProvisionStatus? {
    @inline(__always)
    get {
      return self.__status.has_value() ? self.__status.pointee : nil
    }
    @inline(__always)
    set {
      self.__status = { () -> bridge.std__optional_PTProvisionStatus_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_PTProvisionStatus_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var error: PTError? {
    @inline(__always)
    get {
      return self.__error.has_value() ? self.__error.pointee : nil
    }
    @inline(__always)
    set {
      self.__error = { () -> bridge.std__optional_PTError_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_PTError_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
