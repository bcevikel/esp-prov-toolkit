///
/// HybridEspProvToolkitSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridEspProvToolkitSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
public class HybridEspProvToolkitSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::espprovtoolkit::bridge::swift`)
   * from `EspProvToolkit-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.espprovtoolkit.bridge.swift

  /**
   * Holds an instance of the `HybridEspProvToolkitSpec` Swift protocol.
   */
  private var __implementation: any HybridEspProvToolkitSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__espprovtoolkit__HybridEspProvToolkitSpec_

  /**
   * Create a new `HybridEspProvToolkitSpec_cxx` that wraps the given `HybridEspProvToolkitSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridEspProvToolkitSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridEspProvToolkitSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridEspProvToolkitSpec() -> any HybridEspProvToolkitSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridEspProvToolkitSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridEspProvToolkitSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridEspProvToolkitSpec_cxx {
    return Unmanaged<HybridEspProvToolkitSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::espprovtoolkit::HybridEspProvToolkitSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__espprovtoolkit__HybridEspProvToolkitSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__espprovtoolkit__HybridEspProvToolkitSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__espprovtoolkit__HybridEspProvToolkitSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func searchForESPDevices(devicePrefix: std.string, transport: Int32, security: Int32) -> bridge.Result_std__shared_ptr_Promise_PTSearchResult___ {
    do {
      let __result = try self.__implementation.searchForESPDevices(devicePrefix: String(devicePrefix), transport: margelo.nitro.espprovtoolkit.PTTransport(rawValue: transport)!, security: margelo.nitro.espprovtoolkit.PTSecurity(rawValue: security)!)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTSearchResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTSearchResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTSearchResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTSearchResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTSearchResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func stopSearchingForESPDevices() -> bridge.Result_void_ {
    do {
      try self.__implementation.stopSearchingForESPDevices()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createESPDevice(deviceName: std.string, transport: Int32, security: Int32, proofOfPossession: bridge.std__optional_std__string_, softAPPassword: bridge.std__optional_std__string_, username: bridge.std__optional_std__string_) -> bridge.Result_std__shared_ptr_Promise_PTResult___ {
    do {
      let __result = try self.__implementation.createESPDevice(deviceName: String(deviceName), transport: margelo.nitro.espprovtoolkit.PTTransport(rawValue: transport)!, security: margelo.nitro.espprovtoolkit.PTSecurity(rawValue: security)!, proofOfPossession: { () -> String? in
        if let __unwrapped = proofOfPossession.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }(), softAPPassword: { () -> String? in
        if let __unwrapped = softAPPassword.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }(), username: { () -> String? in
        if let __unwrapped = username.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getESPDevice(deviceName: std.string) -> bridge.Result_PTDeviceResult_ {
    do {
      let __result = try self.__implementation.getESPDevice(deviceName: String(deviceName))
      let __resultCpp = __result
      return bridge.create_Result_PTDeviceResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_PTDeviceResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func doesESPDeviceExist(deviceName: std.string) -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.doesESPDeviceExist(deviceName: String(deviceName))
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func scanWifiListOfESPDevice(deviceName: std.string) -> bridge.Result_std__shared_ptr_Promise_PTWifiScanResult___ {
    do {
      let __result = try self.__implementation.scanWifiListOfESPDevice(deviceName: String(deviceName))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTWifiScanResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTWifiScanResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTWifiScanResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTWifiScanResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTWifiScanResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func connectToESPDevice(deviceName: std.string) -> bridge.Result_std__shared_ptr_Promise_PTSessionResult___ {
    do {
      let __result = try self.__implementation.connectToESPDevice(deviceName: String(deviceName))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTSessionResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTSessionResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTSessionResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTSessionResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTSessionResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func disconnectFromESPDevice(deviceName: std.string) -> bridge.Result_PTResult_ {
    do {
      let __result = try self.__implementation.disconnectFromESPDevice(deviceName: String(deviceName))
      let __resultCpp = __result
      return bridge.create_Result_PTResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_PTResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func createSessionWithESPDevice(deviceName: std.string) -> bridge.Result_std__shared_ptr_Promise_PTSessionResult___ {
    do {
      let __result = try self.__implementation.createSessionWithESPDevice(deviceName: String(deviceName))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTSessionResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTSessionResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTSessionResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTSessionResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTSessionResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func provisionESPDevice(deviceName: std.string, ssid: std.string, password: std.string) -> bridge.Result_std__shared_ptr_Promise_PTProvisionResult___ {
    do {
      let __result = try self.__implementation.provisionESPDevice(deviceName: String(deviceName), ssid: String(ssid), password: String(password))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTProvisionResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTProvisionResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTProvisionResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTProvisionResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTProvisionResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isESPDeviceSessionEstablished(deviceName: std.string) -> bridge.Result_PTBooleanResult_ {
    do {
      let __result = try self.__implementation.isESPDeviceSessionEstablished(deviceName: String(deviceName))
      let __resultCpp = __result
      return bridge.create_Result_PTBooleanResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_PTBooleanResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func sendDataToESPDevice(deviceName: std.string, path: std.string, data: std.string) -> bridge.Result_std__shared_ptr_Promise_PTStringResult___ {
    do {
      let __result = try self.__implementation.sendDataToESPDevice(deviceName: String(deviceName), path: String(path), data: String(data))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_PTStringResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_PTStringResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_PTStringResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_PTStringResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_PTStringResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getIPv4AddressOfESPDevice(deviceName: std.string) -> bridge.Result_PTStringResult_ {
    do {
      let __result = try self.__implementation.getIPv4AddressOfESPDevice(deviceName: String(deviceName))
      let __resultCpp = __result
      return bridge.create_Result_PTStringResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_PTStringResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getCurrentNetworkSSID() -> bridge.Result_PTStringResult_ {
    do {
      let __result = try self.__implementation.getCurrentNetworkSSID()
      let __resultCpp = __result
      return bridge.create_Result_PTStringResult_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_PTStringResult_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func requestLocationPermission() -> bridge.Result_void_ {
    do {
      try self.__implementation.requestLocationPermission()
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func registerLocationStatusCallback(callback: bridge.Func_std__shared_ptr_Promise_bool___PTLocationAccess) -> bridge.Result_int64_t_ {
    do {
      let __result = try self.__implementation.registerLocationStatusCallback(callback: { () -> (PTLocationAccess) -> Promise<Bool> in
        let __wrappedFunction = bridge.wrap_Func_std__shared_ptr_Promise_bool___PTLocationAccess(callback)
        return { (__level: PTLocationAccess) -> Promise<Bool> in
          let __result = __wrappedFunction.call(__level.rawValue)
          return { () -> Promise<Bool> in
            let __promise = Promise<Bool>()
            let __resolver = { (__result: Bool) in
              __promise.resolve(withResult: __result)
            }
            let __rejecter = { (__error: Error) in
              __promise.reject(withError: __error)
            }
            let __resolverCpp = { () -> bridge.Func_void_bool in
              let __closureWrapper = Func_void_bool(__resolver)
              return bridge.create_Func_void_bool(__closureWrapper.toUnsafe())
            }()
            let __rejecterCpp = { () -> bridge.Func_void_std__exception_ptr in
              let __closureWrapper = Func_void_std__exception_ptr(__rejecter)
              return bridge.create_Func_void_std__exception_ptr(__closureWrapper.toUnsafe())
            }()
            let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__result)
            __promiseHolder.addOnResolvedListenerCopy(__resolverCpp)
            __promiseHolder.addOnRejectedListener(__rejecterCpp)
            return __promise
          }()
        }
      }())
      let __resultCpp = __result
      return bridge.create_Result_int64_t_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_int64_t_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func removeLocationStatusCallback(id: Int64) -> bridge.Result_bool_ {
    do {
      let __result = try self.__implementation.removeLocationStatusCallback(id: id)
      let __resultCpp = __result
      return bridge.create_Result_bool_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_bool_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getCurrentLocationStatus() -> bridge.Result_PTLocationAccess_ {
    do {
      let __result = try self.__implementation.getCurrentLocationStatus()
      let __resultCpp = __result
      return bridge.create_Result_PTLocationAccess_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_PTLocationAccess_(__exceptionPtr)
    }
  }
}
