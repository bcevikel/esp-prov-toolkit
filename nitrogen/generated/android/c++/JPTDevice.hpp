///
/// JPTDevice.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PTDevice.hpp"

#include "JPTSecurity.hpp"
#include "JPTTransport.hpp"
#include "PTSecurity.hpp"
#include "PTTransport.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::espprovtoolkit {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "PTDevice" and the the Kotlin data class "PTDevice".
   */
  struct JPTDevice final: public jni::JavaClass<JPTDevice> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/espprovtoolkit/PTDevice;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct PTDevice by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PTDevice toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldName = clazz->getField<jni::JString>("name");
      jni::local_ref<jni::JString> name = this->getFieldValue(fieldName);
      static const auto fieldSecurity = clazz->getField<JPTSecurity>("security");
      jni::local_ref<JPTSecurity> security = this->getFieldValue(fieldSecurity);
      static const auto fieldTransport = clazz->getField<JPTTransport>("transport");
      jni::local_ref<JPTTransport> transport = this->getFieldValue(fieldTransport);
      static const auto fieldConnected = clazz->getField<jni::JBoolean>("connected");
      jni::local_ref<jni::JBoolean> connected = this->getFieldValue(fieldConnected);
      static const auto fieldUsername = clazz->getField<jni::JString>("username");
      jni::local_ref<jni::JString> username = this->getFieldValue(fieldUsername);
      static const auto fieldVersionInfo = clazz->getField<jni::JString>("versionInfo");
      jni::local_ref<jni::JString> versionInfo = this->getFieldValue(fieldVersionInfo);
      static const auto fieldCapabilities = clazz->getField<jni::JArrayClass<jni::JString>>("capabilities");
      jni::local_ref<jni::JArrayClass<jni::JString>> capabilities = this->getFieldValue(fieldCapabilities);
      static const auto fieldAdvertisementData = clazz->getField<jni::JString>("advertisementData");
      jni::local_ref<jni::JString> advertisementData = this->getFieldValue(fieldAdvertisementData);
      return PTDevice(
        name->toStdString(),
        security->toCpp(),
        transport->toCpp(),
        connected != nullptr ? std::make_optional(static_cast<bool>(connected->value())) : std::nullopt,
        username != nullptr ? std::make_optional(username->toStdString()) : std::nullopt,
        versionInfo != nullptr ? std::make_optional(versionInfo->toStdString()) : std::nullopt,
        capabilities != nullptr ? std::make_optional([&]() {
          size_t __size = capabilities->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = capabilities->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }()) : std::nullopt,
        advertisementData != nullptr ? std::make_optional(advertisementData->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JPTDevice::javaobject> fromCpp(const PTDevice& value) {
      return newInstance(
        jni::make_jstring(value.name),
        JPTSecurity::fromCpp(value.security),
        JPTTransport::fromCpp(value.transport),
        value.connected.has_value() ? jni::JBoolean::valueOf(value.connected.value()) : nullptr,
        value.username.has_value() ? jni::make_jstring(value.username.value()) : nullptr,
        value.versionInfo.has_value() ? jni::make_jstring(value.versionInfo.value()) : nullptr,
        value.capabilities.has_value() ? [&]() {
          size_t __size = value.capabilities.value().size();
          jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.capabilities.value()[__i];
            __array->setElement(__i, *jni::make_jstring(__element));
          }
          return __array;
        }() : nullptr,
        value.advertisementData.has_value() ? jni::make_jstring(value.advertisementData.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::espprovtoolkit
