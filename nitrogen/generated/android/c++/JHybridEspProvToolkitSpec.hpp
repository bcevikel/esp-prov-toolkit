///
/// HybridEspProvToolkitSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridEspProvToolkitSpec.hpp"




namespace margelo::nitro::espprovtoolkit {

  using namespace facebook;

  class JHybridEspProvToolkitSpec: public jni::HybridClass<JHybridEspProvToolkitSpec, JHybridObject>,
                                   public virtual HybridEspProvToolkitSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/espprovtoolkit/HybridEspProvToolkitSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridEspProvToolkitSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridEspProvToolkitSpec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridEspProvToolkitSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridEspProvToolkitSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    std::shared_ptr<Promise<PTSearchResult>> searchForESPDevices(const std::string& devicePrefix, PTTransport transport, PTSecurity security) override;
    void stopSearchingForESPDevices() override;
    std::shared_ptr<Promise<PTResult>> createESPDevice(const std::string& deviceName, PTTransport transport, PTSecurity security, const std::optional<std::string>& proofOfPossession, const std::optional<std::string>& softAPPassword, const std::optional<std::string>& username) override;
    PTDeviceResult getESPDevice(const std::string& deviceName) override;
    bool doesESPDeviceExist(const std::string& deviceName) override;
    std::shared_ptr<Promise<PTWifiScanResult>> scanWifiListOfESPDevice(const std::string& deviceName) override;
    std::shared_ptr<Promise<PTSessionResult>> connectToESPDevice(const std::string& deviceName) override;
    PTResult disconnectFromESPDevice(const std::string& deviceName) override;
    std::shared_ptr<Promise<PTSessionResult>> createSessionWithESPDevice(const std::string& deviceName) override;
    std::shared_ptr<Promise<PTProvisionResult>> provisionESPDevice(const std::string& deviceName, const std::string& ssid, const std::string& password) override;
    PTBooleanResult isESPDeviceSessionEstablished(const std::string& deviceName) override;
    std::shared_ptr<Promise<PTStringResult>> sendDataToESPDevice(const std::string& deviceName, const std::string& path, const std::string& data) override;
    PTStringResult getIPv4AddressOfESPDevice(const std::string& deviceName) override;
    PTStringResult getCurrentNetworkSSID() override;
    void requestLocationPermission() override;
    int64_t registerLocationStatusCallback(const std::function<std::shared_ptr<Promise<bool>>(PTLocationAccess /* level */)>& callback) override;
    bool removeLocationStatusCallback(int64_t id) override;
    PTLocationAccess getCurrentLocationStatus() override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridEspProvToolkitSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::espprovtoolkit
