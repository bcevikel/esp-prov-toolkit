///
/// HybridEspProvToolkitSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.espprovtoolkit

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the EspProvToolkit HybridObject.
 * Implement this abstract class to create Kotlin-based instances of EspProvToolkit.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridEspProvToolkitSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun searchForESPDevices(devicePrefix: String, transport: PTTransport, security: PTSecurity): Promise<PTSearchResult>
  
  @DoNotStrip
  @Keep
  abstract fun stopSearchingForESPDevices(): Unit
  
  @DoNotStrip
  @Keep
  abstract fun createESPDevice(deviceName: String, transport: PTTransport, security: PTSecurity, proofOfPossession: String?, softAPPassword: String?, username: String?): Promise<PTResult>
  
  @DoNotStrip
  @Keep
  abstract fun getESPDevice(deviceName: String): PTDeviceResult
  
  @DoNotStrip
  @Keep
  abstract fun doesESPDeviceExist(deviceName: String): Boolean
  
  @DoNotStrip
  @Keep
  abstract fun scanWifiListOfESPDevice(deviceName: String): Promise<PTWifiScanResult>
  
  @DoNotStrip
  @Keep
  abstract fun connectToESPDevice(deviceName: String): Promise<PTSessionResult>
  
  @DoNotStrip
  @Keep
  abstract fun disconnectFromESPDevice(deviceName: String): PTResult
  
  @DoNotStrip
  @Keep
  abstract fun createSessionWithESPDevice(deviceName: String): Promise<PTSessionResult>
  
  @DoNotStrip
  @Keep
  abstract fun provisionESPDevice(deviceName: String, ssid: String, password: String): Promise<PTProvisionResult>
  
  @DoNotStrip
  @Keep
  abstract fun isESPDeviceSessionEstablished(deviceName: String): PTBooleanResult
  
  @DoNotStrip
  @Keep
  abstract fun sendDataToESPDevice(deviceName: String, path: String, data: String): Promise<PTStringResult>
  
  @DoNotStrip
  @Keep
  abstract fun getIPv4AddressOfESPDevice(deviceName: String): PTStringResult
  
  @DoNotStrip
  @Keep
  abstract fun getCurrentNetworkSSID(): PTStringResult
  
  @DoNotStrip
  @Keep
  abstract fun requestLocationPermission(): Unit
  
  abstract fun registerLocationStatusCallback(callback: (level: PTLocationAccess) -> Promise<Boolean>): Long
  
  @DoNotStrip
  @Keep
  private fun registerLocationStatusCallback_cxx(callback: Func_std__shared_ptr_Promise_bool___PTLocationAccess): Long {
    val __result = registerLocationStatusCallback(callback)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun removeLocationStatusCallback(id: Long): Boolean
  
  @DoNotStrip
  @Keep
  abstract fun getCurrentLocationStatus(): PTLocationAccess

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridEspProvToolkitSpec"
  }
}
